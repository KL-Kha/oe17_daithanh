# -*- coding: utf-8 -*-
from odoo import models, fields, api, _
from odoo.exceptions import ValidationError

class PackingListLine(models.Model):
    _name = 'packing.list.line'
    _description = 'Packing List Line'
    
    packing_list_id = fields.Many2one('packing.list', string='Packing List')
    order_line_id = fields.Many2one('sale.order.line', string='Order Line')
    
    active = fields.Boolean(string='Active',related="packing_list_id.active")
    actual_freight_cost = fields.Float(string='Actual Freight Cost',related="packing_list_id.actual_freight_cost")
    all_shipped = fields.Boolean(string='All Shipped')
    barcode = fields.Char(string='Barcode')
    carton_end = fields.Char(string='Carton End')
    carton_net_weight = fields.Float(string='Carton Net Weight')
    carton_quantity = fields.Float(string='Carton Quantity')
    carton_start = fields.Char(string='Carton Start')
    code = fields.Char(string='Code')
    ctn_cbm = fields.Float(string='Ctn Cbm')
    ctn_total_cbm = fields.Float(string='Carton Total Cbm')
    ctn_type_id = fields.Many2one('carton.type', string='Ctn Type')
    ctn_weight = fields.Float(string='Ctn Weight')
    customer_number = fields.Char(string='Customer part number')
    delivery_slip = fields.Char(string='Delivery Slip',related="packing_list_id.code")
    description = fields.Char(string='Description')
    description_text = fields.Text(string='Description')
    distance_uom_id = fields.Many2one('uom.uom', string='Distance Uom')
    estimated_freight_cost = fields.Float(string='Estimated Freight Cost',related='packing_list_id.estimated_freight_cost')
    freight_invoiced_customer = fields.Float(string='Freight Invoiced to Customer',related="packing_list_id.freight_invoiced_customer")
    freight_prepaid = fields.Boolean(string='Freight Prepaid',related="packing_list_id.freight_prepaid")
    gross_weight = fields.Float(string='Gross Weight')
    height = fields.Float(string='Height')
    hs_code = fields.Char(string='HS code')
    inner_ctn_qty = fields.Float(string='Inner Carton Quantity')
    inventory_site = fields.Char(string='Inventory Site',related="packing_list_id.studio_inventory_site")
    invoice_number = fields.Char(string='Invoice number')
    length = fields.Float(string='Length')
    name = fields.Char(string='Name')
    net_weight = fields.Float(string='Net Weight')
    notes = fields.Text(string='Notes')
    order_delivered_qty = fields.Float(string='Order Delivered Qty',related="order_line_id.qty_delivered")
    order_id = fields.Many2one('sale.order', string='Order',related="order_line_id.order_id")
    
    order_line_id_ref = fields.Integer(string='SO Line ID',related="order_line_id.id")
    order_qty = fields.Float(string='Order Qty',related="order_line_id.product_uom_qty")
    order_ref = fields.Char(string='Order Ref')
    order_remaining_qty = fields.Float(string='Remaining Qty of SO Line')
    
    pallet_cbm = fields.Float(string='Pallet CBM')
    pallet_description = fields.Char(string='Pallets')
    pallet_gross_weight = fields.Float(string='Pallet Gross Weight')
    pallet_height = fields.Float(string='Pallet Height (cm)')
    pallet_length = fields.Float(string='Pallet Length (cm)')
    pallet_net_weight = fields.Float(string='Pallet Weight')
    pallet_qty = fields.Float(string='Pallet Qty')
    pallet_total_cbm = fields.Float(string='Pallet Total Cbm')
    pallet_width = fields.Float(string='Pallet Width (cm)')
    parent_line_id = fields.Many2one('packing.list.line', string='Parent Line')
    partner_id = fields.Many2one('res.partner', string='Partner',related="packing_list_id.customer")
    product_id = fields.Many2one('product.product', string='Product')
    product_net_weight = fields.Float(string='Product Net Weight')
    product_tmpl_id = fields.Many2one('product.template', string='Product Tmpl',related="product_id.product_tmpl_id")
    qty_per_carton = fields.Float(string='Qty Per Carton')
    quantity = fields.Float(string='Quantity')
    sequence = fields.Integer(string='Sequence')
    shipped_quantity = fields.Float(string='Shipped Quantity')
    shipping_marks = fields.Text(string='Shipping Marks')
    ship_status = fields.Char(string='Ship Status',related="packing_list_id.ship_status")
    size = fields.Char(string='Size')
    studio_vendor_pl = fields.Char(string='Vendor PL',related="packing_list_id.studio_vendor_pl")
    target_carton_weight = fields.Float(string='Target Carton Weight')
    target_ctn_cbm = fields.Float(string='Target Ctn Cbm')
    target_distance_uom_id = fields.Many2one('uom.uom', string='Target Distance')
    target_gross_weight = fields.Float(string='Target Gross Weight')
    target_height = fields.Float(string='Target Height')
    target_length = fields.Float(string='Target Length')
    target_net_weight = fields.Float(string='Target Net Weight')
    target_product_net_weight = fields.Float(string='Target Product Net Weight')
    target_total_cbm = fields.Float(string='Target Total Cbm')
    target_total_gross_weight = fields.Float(string='Target Total Gross Weight')
    target_total_net_weight = fields.Float(string='Target Total Net Weight')
    target_weight_uom_id = fields.Many2one('uom.uom', string='Target Weight Uom')

    target_width = fields.Float(string='Target Width')
    title = fields.Char(string='Title')
    total_amount = fields.Float(string='Total Amount',compute="_compute_total_amount")
    total_cbm = fields.Float(string='Total Cbm')
    total_gross_weight = fields.Float(string='Total Gross Weight')
    total_net_weight = fields.Float(string='Total Net Weight')
    tracking = fields.Char(string='Tracking',related="packing_list_id.tracking")
    tradelink = fields.Char(string='Tradelink UDR',related="packing_list_id.tradelink_udr")
    type_pallet_id = fields.Many2one('carton.type', string='Type Pallet')
    mjb_packing_list_ctn_type = fields.Char(string='MJB Packing List CTN Type')
    unit_price = fields.Float(string='Unit Price',related="order_line_id.price_unit")
    vendor_po_no = fields.Char(string='Vendor PO No',related="packing_list_id.studio_vendor_po_no")
    weight_uom_id = fields.Many2one('uom.uom', string='Weight Uom')

    width = fields.Float(string='Width')

    @api.depends('unit_price', 'quantity')
    def _compute_total_amount(self):
        for record in self:
            record["total_amount"] = (record.unit_price or 0.0) * (record.quantity or 0.0)
    
    def pll_duplicate(self):
        self.coppy({})